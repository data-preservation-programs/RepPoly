@read
collection starboard {
  id: string;
  balance: number;
  base_tx_fee: string;
  batch_fee: string;
  blocks_mined: number;
  date_stamp: string;
  fee_debt: number;
  initial_pledge: number;
  locked_funds: number;
  miner_tip: string;
  onboarding_at: string;
  over_estimation_burn: string;
  pre_commit_deposits: number;
  provider_collateral: number;
  provider: string;
  rewards: number;
  sector_size: number;
  stat_date: string;
  win_count: number;
  windowpost_gas_fee: string;
  constructor (id: string, balance: number, base_tx_fee: string, batch_fee: string, blocks_mined: number, date_stamp: string, fee_debt: number, initial_pledge: number, locked_funds: number, miner_tip: string, onboarding_at: string, over_estimation_burn: string, pre_commit_deposits: number, provider_collateral: number, provider: string, rewards: number, sector_size: number, stat_date: string, win_count: number, windowpost_gas_fee: string) {
    this.id = id;
    this.balance = balance;
    this.base_tx_fee = base_tx_fee;
    this.batch_fee = batch_fee;
    this.blocks_mined = blocks_mined;
    this.date_stamp = date_stamp;
    this.fee_debt = fee_debt;
    this.initial_pledge = initial_pledge;
    this.locked_funds = locked_funds;
    this.miner_tip = miner_tip;
    this.onboarding_at = onboarding_at;
    this.over_estimation_burn = over_estimation_burn;
    this.pre_commit_deposits = pre_commit_deposits;
    this.provider_collateral = provider_collateral;
    this.provider = provider;
    this.rewards = rewards;
    this.sector_size = sector_size;
    this.stat_date = stat_date;
    this.win_count = win_count;
    this.windowpost_gas_fee = windowpost_gas_fee;
  }

  del () {
    if (owner != ctx.auth) {
      throw error();
    }

    selfdestruct();
  }
}